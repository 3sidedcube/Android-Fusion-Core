package com.cube.fusion.core.processor

import kotlin.reflect.KClass

/**
 * Structure used to register a data pre-processing step for various data types
 *
 * Created by JR Mitchell on 15/May/2023.
 * Copyright Â® 3SidedCube. All rights reserved.
 */
class FusionDataPreprocessorCollection {
	private val map: MutableMap<Class<*>, FusionDataPreprocessor<*>> = hashMapOf()

	/**
	 * Sets the preprocessor for a given type
	 * @param T The type of data that the preprocessor acts on
	 * @param clazz The class of [T]
	 * @param preprocessor The data preprocessor to use for data of type [T]
	 */
	operator fun <T> set(clazz: Class<T>, preprocessor: FusionDataPreprocessor<T>) {
		map[clazz] = preprocessor
	}

	/**
	 * Sets the preprocessor for a given type
	 * @param T The type of data that the preprocessor acts on
	 * @param clazz The class of [T]
	 * @param preprocessor The data preprocessor to use for data of type [T]
	 */
	operator fun <T : Any> set(clazz: KClass<T>, preprocessor: FusionDataPreprocessor<T>) = set(clazz.java, preprocessor)

	/**
	 * Convenience method to set multiple preprocessors, to execute in the specified order, for a given type
	 * @param T The type of data that the preprocessors act on
	 * @param clazz The class of [T]
	 * @param preprocessors The data preprocessors to use for data of type [T], specified in execution order
	 */
	fun <T> setMultiple(clazz: Class<T>, vararg preprocessors: FusionMultiPreprocessor<T>) {
		if(preprocessors.size == 1) {
			set(clazz, preprocessors[0])
		} else {
			set(clazz, FusionMultiPreprocessor.multiPreprocessorOf(*preprocessors))
		}
	}

	/**
	 * Convenience method to set multiple preprocessors, to execute in the specified order, for a given type
	 * @param T The type of data that the preprocessors act on
	 * @param clazz The class of [T]
	 * @param preprocessors The data preprocessors to use for data of type [T], specified in execution order
	 */
	fun <T : Any> setMultiple(clazz: KClass<T>, vararg preprocessors: FusionMultiPreprocessor<T>) = setMultiple(clazz.java, *preprocessors)

	/**
	 * Gets the preprocessor for a given type
	 * @param T The type of data that the preprocessor acts on
	 * @param clazz The class of [T]
	 * @return The data preprocessor to use for data of type [T]
	 */
	@Suppress("UNCHECKED_CAST")
	operator fun <T> get(clazz: Class<T>) = map[clazz] as? FusionDataPreprocessor<T>

	/**
	 * Gets the preprocessor for a given type
	 * @param T The type of data that the preprocessor acts on
	 * @param clazz The class of [T]
	 * @return The data preprocessor to use for data of type [T]
	 */
	operator fun <T : Any> get(clazz: KClass<T>) = get(clazz.java)

	/**
	 * Pre-processes the supplied [data], transforming it into a new instance of [T]
	 *
	 * @param T The type of data to preprocess
	 * @param clazz The class of [T]
	 * @param data The data to process
	 * @return A new instance of [T] generated by applying the pre-processing for this type to [data]
	 */
	fun <T> preprocess(clazz: Class<T>, data: T): T = get(clazz)?.preprocess(data) ?: data

	/**
	 * Pre-processes the supplied [data], transforming it into a new instance of [T]
	 *
	 * @param T The type of data to preprocess
	 * @param clazz The class of [T]
	 * @param data The data to process
	 * @return A new instance of [T] generated by applying the pre-processing for this type to [data]
	 */
	fun <T : Any> preprocess(clazz: KClass<T>, data: T) = preprocess(clazz.java, data)
}